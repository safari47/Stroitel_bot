from faststream import FastStream
from faststream.redis import RedisBroker
from db.dao_class import SubscribeDAO, GetUser
from db.database import connection
from loguru import logger
from config.config import bot
from datetime import datetime
from keyboards.user_kb import phone_kb
import asyncio

broker = RedisBroker("redis://localhost:6379")
app = FastStream(broker)


@broker.subscriber("broadcast_message")
async def broadcast_message(data):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
    await bot_message(
        phone=data["phones"],
        message=data["cleaned_message"],
        category=data["closest_category"],
        region=data["region"],
    )
    return True


@connection()
async def bot_message(phone: str, message: str, category: str, region: str, session):
    good_send = 0
    bad_send = 0

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await SubscribeDAO.find_all(
        session=session,
        filters=GetUser(region=region, category=category),
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not users:
        logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return good_send, bad_send

    # logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users)}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_message = (
        "üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.today().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {region}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "ü§ù –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º:\n"
        "https://t.me/Spetstekhnika_free"
        "\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    )

    # –¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        for user in users:
            try:

                # logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=send_message,
                    reply_markup=phone_kb(phone=phone).as_markup(),
                    disable_web_page_preview=True,
                )
                good_send += 1  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            except Exception as e:
                # logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                bad_send += 1
            await asyncio.sleep(0.3)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    finally:
        # –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {good_send}, –ù–µ —É–¥–∞–ª–æ—Å—å: {bad_send}")

    return good_send, bad_send
